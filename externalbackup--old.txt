
def external_backup():
    # Location of External backup, to check if the language folder exists
    external_lan_dir = r'D:\Code\2019\\' + backup_language
    if os.path.exists(external_lan_dir):
        # Check if project has a backup saved already
        if os.path.exists(external_dir):
            print(
                '\nFolder has already been backed up, previously. '
                'Proceeding to zip previous folder before copying new backup.')
            # Check for any old zip files of the project
            os.chdir(external_lan_dir)
            for file in glob.glob(project_name + '.zip'):
                # All zips with the name of the current project backup will be deleted
                shutil.rmtree(external_lan_dir + file)
                for i in os.listdir(dir):
                    if i.endswith('git'):
                        tmp = os.path.join(dir, i)
                        # We want to un-hide the .git folder before un-linking it.
                        while True:
                            call(['attrib', '-H', tmp])
                            break
                        shutil.rmtree(tmp, onerror=on_rm_error)
            # Call function to zip previous backup
            make_archive(project_name + '--OLD', external_dir)
            # Print to console when the zipping has finished
            print(project_name +
                  ' has been zipped. Proceeding to delete non-zipped folder.')
            # Delete the non-zipped folder before copying new backup
            for i in os.listdir(external_dir):
                if i.endswith('git'):
                    tmp = os.path.join(external_dir, i)
                    # We want to un-hide the .git folder before un-linking it.
                    while True:
                        call(['attrib', '-H', tmp])
                        break
                    shutil.rmtree(tmp, onerror=on_rm_error)

            print('Non-zipped folder is being deleted.')
            try:
                shutil.rmtree(external_dir)
                print('Copying project to backup')
                shutil.copytree(src_dir, external_dir)
            except OSError as e:
                print('Error while copying! %s' % e)
            print('Successfully backed up.\n')
        else:
            # Copy project folder as normal
            print('\nBackup to external has begun.')
            shutil.copytree(src_dir, external_dir)
            print('Backup to the external has been completed.')
    elif not os.path.exists(external_lan_dir):
        # Backup language does not exist, so create the folder before performing backup
        os.chdir(r'D:\Code\2019\\')
        os.mkdir(backup_language)
        print('\n' + backup_language + ' not found. Created a new folder called '
              + backup_language + '. Proceeding to backup files to external HDD.')
        shutil.copytree(src_dir, external_dir)
        print('Backup to the external has been completed.')
    return


def make_archive(output_name, project_dir):
    shutil.make_archive(output_name, 'zip', project_dir)
    return


def on_rm_error(func, path, exc_info):
    # from:
    # https://stackoverflow.com/questions/4829043/how-to-remove-read-only-attrib-directory-with-python-in-windows
    os.chmod(path, stat.S_IWRITE)
    os.unlink(path)

